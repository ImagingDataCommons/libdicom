- replace copy-paste code over types with a table
	dcm_element_clone()

- element->vr should be an enum (not "UL" etc.)
	- swap all the strcmps for ==

- what does DCM_DEBUG_ONLY() mean? is this sanity checking?

- have a thing to free an array of strings, plus the arraee eg.
	create_element_str_multi()

- use a table for dcm_element_create_* as well

- disable assert in production builds
	there's eg. assert_vr() too, check this

- should create_element() take a size_t for length?

- dcm_element_create_SS_multi() is not copying the argument, is this correct?
	dcm_element_create_FL_multi()
	dcm_element_create_SL_multi
	etc.

  maybe it should be called _steal 

- create_element_str() will free value on error, is this correct? fix it?

- likewise, dcm_element_create_SQ() destroys the value if sq create fails

- what does is_locked do? when do we unlock? looks bad

- dcm_dataset_contains() should be the base operation, dcm_dataset_get()
  should flag an error if missing

- remove dcm_dataset_copy_tags() etc should not use uint32_t? what about
  dcm_dataset_count()?

	get_num_frames() uses strtol(), so it's a long

  does utarray_len() really return uint32?

- dcm_dataset_print() should not use uint8_t

- call dcm_dataset_lock() everywhere, don't set lock by hand

- should the foreach funcs take two params? are they used?

- wrappers for read() / seek() / etc. that include error checks 

  part of allowing your own read funcs

- we very often have eg.:

	            dcm_error_set(error, DCM_ERROR_CODE_PARSE,
                          "Reading Frame Item failed. "
                          "No Item Tag found for Frame Item #%d.",
                          number);

  perhaps have separate "summary" and "detail" fields in error?

- check we use dcm_strdup() everywhere

- check use of dcm_sequence_get() ... use dcm_sequence_contains() instead

	
